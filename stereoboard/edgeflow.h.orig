/*
 * divergence.h
 *
 *  Created on: Apr 9, 2015
 *      Author: knmcguire
 */

#ifndef DIVERGENCE_H_
#define DIVERGENCE_H_

#ifdef COMPILE_ON_LINUX
#include <inttypes.h>
#include <stdio.h>
#else
#include "arm_math.h"
#endif
#include "main_parameters.h"
#include "image.h"

#ifndef MAX_HORIZON
#define MAX_HORIZON 10
#endif

/*    Coordinate system stereocam (image coordinates)
*    z      x
* (( * ))----->
*    |                       * = arrow pointed into the frame away from you
*    | y
*    V
*/

// TODO: move somewhere better
struct vec2_t {
  int32_t x;
  int32_t y;
};

struct vec3_t {
  int32_t x;
  int32_t y;
  int32_t z;
};

struct rot_t {
  int32_t phi;
  int32_t theta;
  int32_t psi;
};

struct cam_state_t {
  float phi;
  float theta;
  float psi;
  float alt;
  int32_t us_timestamp;
};

struct edge_hist_t {
  int32_t x[IMAGE_WIDTH];   // Edge_hist: edgehistogram in x-direction (image coordinates)
  int32_t y[IMAGE_HEIGHT];  // Edge_hist: edgehistogram in y-direction (image coordinates)
  int32_t frame_time;       // Edge_hist: Frame time corresponding to the image from which the edge histogram is made [in us]
  int16_t phi;              // Edge_hist: phi: rotation around the x-axis of the camera (along image width) [rad]
  int16_t theta;            // Edge_hist: theta: rotation around the y-axis of the camera (along image height)[rad]
  int16_t psi;              // Edge_hist: psi: rotation around the z-axis of the camera (perpendicular on frame plane) [rad]
  int16_t alt;              // altitude of camera above ground, used in monocam mode
};

struct displacement_t {
  int32_t x[IMAGE_WIDTH];                 // Displacement: pixel displacement of edgehistograms (in time) in x-direction (image coordinates) [in pix/s]
  int32_t y[IMAGE_HEIGHT];                // Displacement: pixel displacement of edgehistograms (in time) in Y-direction (image coordinates) [in pix/s]
  uint32_t confidence_x[IMAGE_WIDTH];     // confidence of fit measured by slope of disparity error
  uint32_t confidence_y[IMAGE_HEIGHT];    // confidence of fit measured by slope of disparity error
  int32_t stereo[IMAGE_WIDTH];            // Displacement: pixel displacement of edgehistograms (in stereo) in x-direction (image coordinates) [in RES * pix]
  uint32_t confidence_stereo[IMAGE_WIDTH];// confidence of fit measured by slope of disparity error
};

struct covariance_t {
  struct vec3_t C_vel;         // Kalman: covariance matrix of translational flow in x-direction (image coordinates)
  struct vec3_t C_dist;        // Kalman: covariance matrix of distance estimate
};

//TODO: reduce structures edgeflow_parameters and edgeflow

struct edgeflow_parameters_t {
  int16_t fovx;                 // Camera Parameters: Field of view of x axis scaled by RES
  int16_t fovy;                 // Camera Parameters: Field of view of y axis scaled by RES
  int16_t img_w;                // Camera Parameters: Image width in pixels
  int16_t img_h;                // Camera Parameters: Image height in pixels
  int16_t camera_seperation;    // Camera Parameters: How far the cameras are apart on a stereocamera in RES
  int8_t max_horizon;           // EdgeFlow: Maximum horizon for edgeflow to look back in time
  int8_t adapt_horizon;         //  0 = off 1 = on, To use adaptive horizon comparison or only compare with the next immediate frame
  int8_t disparity_range;       // Block matching: Actual search disparity range for block matching
  int8_t window_size;           // Block matching: Window size of neighbouring values
  int8_t derotation;            // Modes: 0 = off 1 = on,  To derotate the flow based on IMU data  (received from the autopilot)
  int8_t filter_type;           // Filter method: NONE, KALMAN, MOVING_AVGERAGE
  int32_t Q;                    // Kalman Filter: Process noise parameter
  int32_t R;                    // Kalman Filter: Measurement noise parameter
  int32_t alpha;                // Moving Average: Low pass filter constant
  int32_t RES;                  // EdgeFlow: Resolution factor
  int32_t use_monocam;          // Modes: 0 = using stereocamera, 1 = using monocam
  int16_t stereo_shift;         //  necessary stereo_shift (from calibration) to obtain the right
  struct covariance_t cov;      // Covariance value for kalman filter
};

//TODO: reduce structure size

struct edgeflow_t {
  uint8_t ran_twice;                              // stores whether or not the edge flow has run for a previous frame yet
  struct edge_hist_t edge_hist[MAX_HORIZON];  // Stores an array of edgehistograms for a maximum horizon
  int32_t edge_hist_right[IMAGE_WIDTH];       // Edgehistogram in x-direction for right image (image coordinates)
  struct edge_hist_t edge_hist_snapshot;      // Stores a snapshot edgehistogram
  uint8_t flow_quality;                       // Quality of flow
  //struct vec3_t unscaled_vel;                 // Translational flow and divergence measured in current time step, in pix/s from centre of image
  struct vec3_t vel;                          // Translational flow and divergence measured in current time step
  struct vec3_t prev_vel;                     // Translational flow and divergence measured in previous time step
  struct displacement_t disp;                 // Saves displacement of edgeflow in x and y direction (image coordinates) and stereo
  int32_t vel_stereo_mean;                    // Velocity as measured from the difference between stereo distances in time
  uint8_t current_frame_nr;                   // Current frame number to indicate where the edge histogram was of the current time
  uint8_t prev_frame_offset_x;                // Previous frame offset for the y direction (image coordinates)
  uint8_t prev_frame_offset_y;
  uint8_t prev_frame_x;
  uint8_t prev_frame_y;
  uint32_t avg_disp;                          // Displacement from full image matching
  int32_t avg_dist;                           // Distance from full image matching in m * RES
  int32_t prev_avg_dist;                      //  previous distance from full image matching
  int32_t vel_x_stereo_avoid_pixelwise;       //  Avoid velocity based on stereo (xdirection, image coordinates, sideways)
  int32_t vel_z_stereo_avoid_pixelwise;       //  Avoid velocity based on stereo (zdirection, image coordinates, out of image)
  int32_t dt;                                 // time difference between two consecutive frames in us
  struct vec2_t hz;                           //  Frames per second scaled by RES, taking the compare horizon into account (x-direction image coordinates)
  struct rot_t angle_der;                     //  Difference in angles roll from one frame to another
  uint8_t obst_mode;                          //  Behavior based on EdgeStereo
  int32_t distance_closest_obstacle;          // Avoidance: Distance of closes obstacle
  uint8_t obstacle_detect[IMAGE_WIDTH];       // Avoidance: Isolated obstacles with distances
};

struct snapshot_t {
  bool use_snapshot;
  uint32_t snapshots;
  struct edge_hist_t keyframe;        // Stores snapshot edge histogram
  struct displacement_t disp;         // Saves displacement of edgeflow in x and y direction (image coordinates) and stereo
  struct vec3_t dist;
  struct vec3_t dist_traveled;
  struct vec3_t prev_dist;
  uint8_t quality;                    // Quality of displacement estimate
};

// shared variables
extern uint8_t edgeflow_msg[];
extern struct edgeflow_parameters_t edgeflow_params;
extern struct edgeflow_t edgeflow;
extern struct snapshot_t edgeflow_snapshot;

// Global Functions divergence
<<<<<<< Updated upstream
void edgeflow_init(int16_t img_w, int16_t img_h, int8_t use_monocam, struct cam_state_t *cam_state_ref);
void edgeflow_total(uint8_t *current_image_buffer, uint32_t frame_time);
void edgeflow_to_sendarray(uint8_t *edgeflow_array);
=======
void edgeflow_init(int16_t img_w, int16_t img_h, int8_t use_monocam);
void edgeflow_total(uint8_t *current_image_buffer, uint32_t frame_time, int16_t *data_in, uint8_t data_len);
void send_edgeflow(void);
>>>>>>> Stashed changes

// Calculation functions
void calculate_edge_flow(uint8_t in[], struct edgeflow_parameters_t *edgeflow_parameters,
                         struct edgeflow_t *edgeflow);
void calculate_edge_hist(uint8_t *in, int32_t *edge_hist, uint16_t img_w, uint16_t img_h, char direction, char side);
uint32_t calculate_disparity(int32_t *edge_hist1, int32_t *edge_hist2, int32_t *disparity, uint16_t size,
                             uint8_t window, int16_t pix_shift, uint32_t *confidence, int32_t RES, int32_t min_range, int32_t max_range);
int32_t calculate_disparity_fullimage(int32_t *edge_hist_l, int32_t *edge_hist_r, uint16_t size, uint8_t disp_range,
                                      int16_t stereo_shift);
void avoid_velocity_from_stereo(int32_t *stereo_distance_per_column, int32_t *vel_x_stereo_avoid_pixelwise,
                                int32_t *vel_z_stereo_avoid_pixelwise, int32_t max_velocity, int32_t size, int32_t border, int16_t stereo_shift);
void calculate_snapshot_displacement(struct edgeflow_parameters_t *params, struct edgeflow_t *edgeflow, struct snapshot_t *snapshot);

// misc funcitons
void visualize_divergence(uint8_t *in, int8_t *displacement, int32_t slope, int32_t yInt, uint32_t img_w,
                          uint32_t img_h);
uint8_t evaluate_edgeflow_stereo(int32_t *dist_per_column, int32_t size, int32_t border);
int32_t edgestereo_obstacle_detection(int32_t *dist_per_column, uint8_t *obstacle_detect, int32_t size, int32_t border);

//Help functions
void find_minimum(int32_t *pSrc, uint8_t blockSize, int32_t *pResult, uint32_t *pIndex, uint8_t min_index);
uint32_t getMeanDisp(uint32_t *a, int32_t n, int32_t border, uint32_t thresh);

#endif /* DIVERGENCE_H_ */
